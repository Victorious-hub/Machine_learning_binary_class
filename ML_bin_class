import numpy as np
import matplotlib.pyplot as plt


x_train = np.array([[10, 50], [20, 30], [25, 30], [20, 60], [15, 70], [40, 40], [30, 45], [20, 45], [40, 30], [7, 35]])#len = 10
y_train = np.array([-1, 1, 1, -1, -1, 1, 1, -1, 1, -1])

n_train = len(x_train)                          # размер обучающей выборки
w = [0, -1]                                    # начальное значение вектора w
a = lambda x: np.sign(x[0]*w[0] + x[1]*w[1])    # решающее правило(здесь вычисляется скалярное произведение вектора omega).sign-знак, если x < 0(-1) и x > 0(1).
N = 50                                          # максимальное число итераций
L = 0.1#он нам пригодится для дальнейшего смещения линии, чтобы выравнять и разделить объекты(-1 и 1).                                         # шаг изменения веса
e = 0.1                                         # небольшая добавка для w0 чтобы был зазор между разделяющей линией и граничным образом

last_error_index = -1#тут число для описания пока    # индекс последнего ошибочного наблюдения

for n in range(N):
    for i in range(n_train):                # перебор по наблюдениям
        if y_train[i]*a(x_train[i]) < 0:    # если ошибка классификации, a(x_train[i]) - лямбда-функция.
            w[0] = w[0] + L * y_train[i]    # то корректировка веса w0(то есть вот здесь и происходит этот процесс чтобы выравнять линию и разделить два объекта).
            last_error_index = i# это будет использоватся для смещении линии гиперплоскости так, чтобы она не проходила через объекты.

    Q = sum([1 for i in range(n_train) if y_train[i]*a(x_train[i]) < 0])#для вычисления неверных образов(если все верно, то должен быть 0 и цикл завершится).(по той формуле и нотацией Айверсона)
    if Q == 0:      # показатель качества классификации (число ошибок)
        break       # останов, если все верно классифицируем

if last_error_index > -1:#вот здесь уже конечная чтобы линия не переходила через объекты.
    w[0] = w[0] + e * y_train[last_error_index]

print(w)
#ну а далее чисто знания numpy/matplotlib.
line_x = list(range(max(x_train[:, 0])))    # формирование графика разделяющей линии
line_y = [w[0]*x for x in line_x]

x_0 = x_train[y_train == 1]                 # формирование точек для 1-го
x_1 = x_train[y_train == -1]                # и 2-го классов

plt.scatter(x_0[:, 0], x_0[:, 1], color='red')
plt.scatter(x_1[:, 0], x_1[:, 1], color='blue')
plt.plot(line_x, line_y, color='green')
plt.xlim([0, 45])
plt.ylim([0, 75])
plt.ylabel("длина")
plt.xlabel("ширина")
plt.grid(True)
plt.show()


#2-й способ написания проги через функции потерь
import numpy as np
import matplotlib.pyplot as plt

x_train = [[10, 50], [20, 30], [25, 30], [20, 60], [15, 70], [40, 40], [30, 45], [20, 45], [40, 30], [7, 35]]
x_train = [x + [1] for x in x_train]
x_train = np.array(x_train)
y_train = np.array([-1, 1, 1, -1, -1, 1, 1, -1, 1, -1])

pt = np.sum([x * y for x, y in zip(x_train, y_train)], axis=0)
xxt = np.sum([np.outer(x, x) for x in x_train], axis=0)
w = np.dot(pt, np.linalg.inv(xxt))
print(w)

line_x = list(range(max(x_train[:, 0])))    # формирование графика разделяющей линии
line_y = [-x*w[0]/w[1] - w[2]/w[1] for x in line_x]

x_0 = x_train[y_train == 1]                 # формирование точек для 1-го
x_1 = x_train[y_train == -1]                # и 2-го классов

plt.scatter(x_0[:, 0], x_0[:, 1], color='red')
plt.scatter(x_1[:, 0], x_1[:, 1], color='blue')
plt.plot(line_x, line_y, color='green')

plt.xlim([0, 45])
plt.ylim([0, 75])
plt.ylabel("длина")
plt.xlabel("ширина")
plt.grid(True)
plt.show()
